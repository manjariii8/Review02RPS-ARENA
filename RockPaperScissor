import java.sql.*;
import java.util.ArrayList;
import java.util.InputMismatchException;
import java.util.Random;
import java.util.Scanner;

class MyException extends Exception {
    @Override
    public String toString() {
        return "Invalid Move! Please enter valid number.";
    }

    public String getMessage() {
        return "Invalid Move! Please enter valid number.";
    }
}

public class RockPaperScissor {

    private static final String url = "jdbc:mysql://localhost:3306/rps_board";
    private static final String username = "root";
    private static final String password = "Manjari@1234";

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String playerName;
        while(true){
           System.out.print("Enter your name: ");
           playerName = sc.nextLine().trim();
           if (!playerName.isEmpty() && playerName.matches("[a-zA-Z]+")) {
           break;
           } else {
            System.out.println("Invalid name! Please enter letters only (no numbers or symbols).");
           }
        }

        String choice;
        do{
        System.out.print("Enter number of turns you want to play: ");
        int turns = 0;
        try{
            turns=sc.nextInt();
        }catch(InputMismatchException e){
            System.out.println("Invalid number of turns! Please enter a valid integer.");
            return;
        }

        Random random = new Random();
        int i = 1, countC = 0, countM = 0;
        
        System.out.println("\n**********Game Start*********");
        System.out.println("Select=>'0'->Rock\n'1'->Paper\n'2'->Scissor");
        
            while (i <= turns) {
                try{
                System.out.println("\nTurn "+i+ ":");
                System.out.print("Select your choice:");

                if (!sc.hasNextInt()) {
                    System.out.println("Invalid input type! Please enter 0, 1, or 2.");
                    sc.next();
                    continue;
                }


                int num = sc.nextInt();
                if (num < 0 || num > 2) {
                    throw new MyException(); // My custom Exception
                }
                int comp_ch = random.nextInt(3);
                switch (num) {
                    case 0 -> System.out.println("You have choosen Rock!");
                    case 1 -> System.out.println("You have choosen Paper!");
                    case 2 -> System.out.println("You have choosen Scissor!");
                }
                switch(comp_ch){
                    case 0 -> System.out.println("Computer chose Rock!");
                    case 1 -> System.out.println("Computer chose Paper!");
                    case 2 -> System.out.println("Computer chose Scissor!");
                }
    
                if (comp_ch == 0 && num == 1 || comp_ch == 1 && num == 2 || comp_ch == 2 && num == 0) {
                    System.out.println("\nYeah! You won this turn!");
                    countM++;
                } else if (comp_ch == num) {
                    System.out.println("\nThis turn is tie.");

                } else {
                    System.out.println("\nShit! Computer won this turn.Better luck next time!");
                    countC++;
                }
                i++;
            }catch (MyException e) {
            System.out.println("Custom Exception: " + e.getMessage());
            } catch (InputMismatchException e) {
            System.out.println("Input must be a number");
            sc.next();
            } catch (Exception e) {
            System.out.println("Unexpected error: " + e.getMessage());
            }

        } 

        System.out.println("\n***************Match Result***************************\n");
        System.out.println("Total turns won by user: " + countM);
        System.out.println("Total turns won by computer: " + countC);
        String result;
        if (countC > countM) {
            System.out.println("\nOops! Computer has won the match.");
            result = "Losings";
        } else if (countC == countM) {
            System.out.println("\nMatch Draw!!");
            result = "Tie";
        } else {
            System.out.println("\nWohhooo! You won the match.");
            result = "Winnings";
        }
        //System.out.println("\n\nNice Game!");
        int Winnings = 0, Losings = 0, Tie = 0;
        if (result.equals("Winnings")) {
            Winnings = 1;
        } else if (result.equals("Losings")) {
            Losings = 1;
        } else {
            Tie = 1;
        }


        try {
            Connection connection = DriverManager.getConnection(url, username, password);
            String insertQuery = "INSERT INTO playerScore (playerName,Winnings, Losings, Tie) VALUES (?,?,?,?)" +
                    "ON DUPLICATE KEY UPDATE Winnings = Winnings + ?, Losings = Losings + ?, Tie = Tie + ?";
            PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);

            preparedStatement.setString(1, playerName);
            preparedStatement.setInt(2, Winnings);
            preparedStatement.setInt(3, Losings);
            preparedStatement.setInt(4, Tie);

            // ON DUPLICATE KEY UPDATE ...
            preparedStatement.setInt(5, Winnings);
            preparedStatement.setInt(6, Losings);
            preparedStatement.setInt(7, Tie);


            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("\nScore Updated Successfully!");
            } else {
                System.out.println("No changes made to the score");
            }
        } catch (SQLException e) {
            System.out.println("Database Error: " + e.getMessage());

        }

        // ****************************************************************Displaying Scoreboard***************************************************
        try {
            Connection connection = DriverManager.getConnection(url, username, password);
            String displayQuery = "SELECT playerName, Winnings, Losings, Tie FROM playerScore ORDER BY Winnings DESC";
            PreparedStatement preparedStatement = connection.prepareStatement(displayQuery);
            ResultSet resultSet = preparedStatement.executeQuery();

            System.out.println("----- Scoreboard -----\n");
            while (resultSet.next()) {
                System.out.println(resultSet.getString("playerName") + ": Winnings - " + resultSet.getInt("Winnings")
                        + ", Losings - " + resultSet.getInt("Losings") + ", Tie - " + resultSet.getInt("Tie"));
            }
        } catch (SQLException e) {
            System.out.println("SQL Error: " + e.getMessage());
        }

        //Ask to play again
        System.out.print("\nDo you want to play again? (yes/no): ");
        choice = sc.next().toLowerCase();
        sc.nextLine();

        } while (choice.equals("yes"));
        sc.close();
        System.out.println("\nProgram ended successfully!");
    }

}
